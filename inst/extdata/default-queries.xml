<?xml version="1.0" encoding="UTF-8"?>
<queries>
	<aQuery>
		<all-regions/>
		<gdpQueryBuilder title="GDP(MER)">
			<axis1 name="region">region</axis1>
			<axis2 name="year">gdp-mer</axis2>
			<xPath buildList="true" dataName="gdp-mer" group="false" sumAll="false">GDP/gdp-mer/text()</xPath>
			<comments/>
        	</gdpQueryBuilder>
	</aQuery>

	<aQuery>
    		<all-regions/>
    		<gdpQueryBuilder title="pcGDP(PPP)">
			<axis1 name="region">region</axis1>
			<axis2 name="year">gdp-per-capita-ppp</axis2>
			<xPath buildList="true" dataName="gdp-per-capita-ppp" group="false" sumAll="false">GDP/gdp-per-capita-ppp/text()</xPath>
			<comments/>
		</gdpQueryBuilder>
	</aQuery>

	<aQuery>
		<all-regions/>
        	<demographicsQuery title="Population">
			<axis1 name="region">region</axis1>
			<axis2 name="year">populationMiniCAM</axis2>
			<xPath buildList="true" dataName="total-population" group="false" sumAll="false">demographics/populationMiniCAM/total-population/node()</xPath>
			<comments/>
        	</demographicsQuery>
	</aQuery>

	<aQuery>
		<all-regions/>
	  <supplyDemandQuery title="Electricity">
            <axis1 name="region">region</axis1>
            <axis2 name="year">physical-output[@vintage]</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and ((@name='electricity' or @name='elect_td_bld' or @name='industrial energy use'))]//*[@type = 'subsector']//*[@type = 'technology' and not (@name='elect_td_bld')]/*[@type='output' (:collapse:)  and (@name='electricity' or @name='elect_td_bld')]/physical-output/node()</xPath>
            <comments/>
	  </supplyDemandQuery>
	</aQuery>

      <aQuery>
		<all-regions/>
		<supplyDemandQuery title="Transportation Service Output">
			<axis1 name="technology">technology</axis1>
			<axis2 name="year">physical-output[@vintage]</axis2>
			<xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/*[@type = 'subsector']/*[@type = 'technology']/*[@type='output' (:collapse:) and not(@name='CAFEcredit')]/physical-output/node()</xPath>
			<comments/>
			<showAttribute attribute-name="year" level="technology"/>
		</supplyDemandQuery>
      </aQuery>


	     <aQuery>
		<all-regions/>
		<supplyDemandQuery title="Transportation Load Factors">
			<axis1 name="technology">technology</axis1>
			<axis2 name="year">technology</axis2>
			<xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/*[@type = 'subsector']/*[@type = 'technology']//load-factor/node()</xPath>
			<comments/>
		</supplyDemandQuery>
      </aQuery>

      <aQuery>
		<all-regions/>
		<supplyDemandQuery title="Transportation Final Energy">
			<axis1 name="technology">technology</axis1>
			<axis2 name="year">demand-physical[@vintage]</axis2>
			<xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'sector' and (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/*[@type = 'subsector']/*[@type = 'technology']/*[@type='input' and not (@name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
			<comments/>
			<showAttribute attribute-name="year" level="technology"/>
		</supplyDemandQuery>
      </aQuery>

	<aQuery>
		<all-regions/>
		<supplyDemandQuery title="Refined Liquids">
			<axis1 name="subsector">subsector</axis1>
			<axis2 name="year">physical-output[@vintage]</axis2>
			<xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' (:collapse:) and ((@name='refining'))]/*[@type = 'subsector']//*[@type='output' (:collapse:)]/physical-output/node()</xPath>
			<comments/>
		</supplyDemandQuery>
      </aQuery>

	<aQuery>
		<all-regions/>
 		<emissionsQueryBuilder title="CO2 Emissions">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]/*[@type='subsector']//CO2/emissions/node()</xPath>
         <comments/>
      </emissionsQueryBuilder>
      </aQuery>

	<aQuery>
		<all-regions/>
		<query title="Land Cover">
			 <axis1 name="land_allocation">LandLeaf</axis1>
			 <axis2 name="Year">land-allocation[@year]</axis2>
			 <xPath buildList="true" dataName="land-allocation" group="false" sumAll="false">/LandNode[@name='root' or @type='LandNode']//land-allocation/text()</xPath>
		</query>
	</aQuery>

	<aQuery>
		<all-regions/>
		<supplyDemandQuery title="Ag Production">
			<axis1 name="sector">sector[@name]</axis1>
			<axis2 name="Year">physical-output[@vintage]</axis2>
			<xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (exists(child::keyword/@supplysector) or local-name() = 'AgSupplySector' or @name='NonFoodDemand_Forest')]//*[@type='output']/physical-output/node()</xPath>
			<comments/>
	 </supplyDemandQuery>
	</aQuery>

	<aQuery>
		<all-regions/>
		<supplyDemandQuery title="Food Consumption">
			 <axis1 name="technology">technology</axis1>
			 <axis2 name="Year">physical-output[@vintage]</axis2>
			 <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type = 'sector' and (@name='FoodDemand_Crops' or @name='FoodDemand_Meat')]//*[@type = 'technology']/*[@type='output']/physical-output/node()</xPath>
			 <comments/>
		</supplyDemandQuery>
	</aQuery>

	<aQuery>
		<all-regions/>
		<supplyDemandQuery title="Biomass Production">
			 <axis1 name="sector">sector[@name]</axis1>
			 <axis2 name="Year">physical-output[@vintage]</axis2>
			 <xPath buildList="false" dataName="output" group="false" sumAll="false">*[@type='sector']//*[@type='subsector']//*[@type='output' (: collapse :) and (@name='biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' ) ]/physical-output/node()</xPath>
			 <comments/>
		</supplyDemandQuery>
	</aQuery>

	<aQuery>
		<supplyDemandQuery title="Biomass Consumption">
			 <axis1 name="sector">sector</axis1>
			 <axis2 name="Year">demand-physical[@vintage]</axis2>
			 <xPath buildList="false" dataName="production" group="false" sumAll="false">*[@type='sector' and (@name='regional biomass')]//*[@type='input']/demand-physical/node()</xPath>
			 <comments/>
		</supplyDemandQuery>
	</aQuery>

	<aQuery>
		<all-regions/>
		<supplyDemandQuery title="Water Withdrawals">
			 <axis1 name="sector">sector</axis1>
			 <axis2 name="Year">demand-physical[@vintage]</axis2>
			 <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='subsector']//*[@type='technology']//*[@type='input' and (@name='water withdrawals')]/demand-physical/node()</xPath>
			 <comments>Supply sectors only.</comments>
		</supplyDemandQuery>
	</aQuery>

	<aQuery>
		<all-regions/>
		<supplyDemandQuery title="Water Consumption">
			 <axis1 name="sector">sector</axis1>
			 <axis2 name="Year">demand-physical[@vintage]</axis2>
			 <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='subsector']//*[@type='technology']//*[@type='input' and (@name='water consumption')]/demand-physical[@unit='km^3']/node()</xPath>
			 <comments>Supply sectors only.</comments>
		</supplyDemandQuery>
	</aQuery>

      <aQuery>
		<all-regions/>
      	<emissionsQueryBuilder title="GHG emissions by subsector">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">
			 	 	 <![CDATA[declare function local:deep-copy($nodes as node()*) as node()* {
                         for $node in $nodes
                         return typeswitch($node)
                         case $e as element()
                             return element { local-name($e) } {
                                 $e/@*,
                                 for $c in $e/(* | text())
                                 return local:deep-copy($c)
                             }
                         default return $node
                     };
			 	 	 declare function local:rename-resource-emiss($resources as node()*) as node()* {
					         for $resource in $resources
			 	 		 let $scn := $resource/ancestor::scenario,
			 			     $rgn := $resource/ancestor::region,
			 			     $retDoc := document { element scenario {
									$scn/@*,
									element region {
										$rgn/@*,
										element sector {
										        attribute type { 'sector' },
											$resource/@name,
											element subsector {
												attribute type { 'subsector' },
												$resource/@name,
												element technology {
													attribute type { 'technology' },
													$resource/@name,
													local:deep-copy($resource/*[@type='GHG'])
			 			 						}
			 			 	  				}
										}
									}
								}
							}
			 			 return
						     $retDoc//text()
			 	 	 };
			 	 	 declare function local:run-combine-sector-resource-emiss($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* {
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios,
			 	 	 $region in $regionsG
			 	 	 let $scenario_split := tokenize($scenario, ' '),
                     $scenario_name := string-join($scenario_split[position() < last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
					 return (: rename resources as a sector/subsector/tech :)
						local:rename-resource-emiss($currTree/*[@type='resource' and exists(child::*[@type='GHG'])])
						| (: get the sector emissions :)
						$currTree/*[@type = 'sector' ]/*[@type='subsector']//*[@type = 'GHG']/emissions/node()
	 	 };
            	 local:run-combine-sector-resource-emiss((:scenarios:), (:regions:), (:collection:))]]>
	 		</xPath>
         <comments/>
      </emissionsQueryBuilder>
      </aQuery>

     <aQuery>
		<all-regions/>
      	<supplyDemandQuery title="Primary Energy Consumption (Direct Equivalent)">
         <axis1 name="fuel">input[@name]</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">
			 	 	 <![CDATA[declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 	 };
			 	 	 declare function local:get-primary-renewable($outputs as node()*) as node()* {
			 	 	 unordered {
			 	 	 for $output in $outputs
			 	 	 let $new_output :=
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output }
			 	 		 }
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 return $new_root//text()
			 	 	 }
			 	 	 };
			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* {
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios,
			 	 	 $region in $regionsG
			 	 	 let $scenario_split := tokenize($scenario, ' '),
                     $scenario_name := string-join($scenario_split[position() < last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='electricity' or @name='elect_td_bld']//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 central production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 forecourt production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get the primaries :)
	 	 						$currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy/demand-physical/text()
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()

	 	 };
            	 local:run-primary-energy((:scenarios:), (:regions:), (:collection:))]]>
            </xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="input">
               <rewrite from="exotic-elect" to="Breakthrough"/>
               <rewrite from="wind-H2" to="Wind"/>
               <rewrite from="biomass" to="Biomass"/>
               <rewrite from="traditional biomass" to="Traditional Biomass"/>
               <rewrite from="crude oil" to="Oil"/>
               <rewrite from="nuclear-elect" to="Nuclear"/>
               <rewrite from="solar-H2" to="Solar"/>
               <rewrite from="regional natural gas" to=""/>
               <rewrite from="traded unconventional oil" to="Oil"/>
               <rewrite from="geothermal-elect" to="Geothermal"/>
               <rewrite from="natural gas" to="Natural Gas"/>
               <rewrite from="hydro-elect" to="Hydro"/>
               <rewrite from="solar-elect" to="Solar"/>
               <rewrite from="coal" to="Coal"/>
               <rewrite from="elect_td_ind" to=""/>
               <rewrite from="wind-elect" to="Wind"/>
               <rewrite from="nuclear-H2" to="Nuclear"/>
               <rewrite from="k new" to="New"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      </aQuery>

	<aQuery>
		<all-regions/>
      <supplyDemandQuery title="Final energy by detailed end-use sector and fuel">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or (exists(child::keyword/@final-energy)))]//*[@type='input' and not(@name='trn_pass_road' or @name='limestone' or @name='process heat cement' or @name='industrial energy use' or @name='industrial feedstocks' or @name='renewable')]/demand-physical[@unit='EJ']/node()</xPath>
         <comments/>
      </supplyDemandQuery>
      </aQuery>

	<aQuery>
		<all-regions/>
<supplyDemandQuery title="CO2 Emissions by enduse">
         <axis1 name="sector">sector[@name]</axis1>
         <axis2 name="Year">emissions[@year]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">
               <![CDATA[declare function local:append-heirarchy($parent as node(), $append as node()*) as node() { let $scn := $parent/ancestor::scenario, $rgn := $parent (: /ancestor::region :) return document { element scenario { $scn/@*, element region { $rgn/@*, $append } } } (: I can get by with just the scenario and region let $new_node := element {local-name($parent)} {$parent/@*, $append} return if(local-name($parent) != 'scenario') then local:append-heirarchy($parent/parent::*, $new_node) else document { $new_node } :) }; declare function local:generate-sector-output-coefs($inputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* { if(empty($inputNameQueue)) then $coefs else if( exists($coefs[@name = $inputNameQueue[1]]) or exists(index-of(('unconventional oil production', "electricity", "cement", "N fertilizer"), $inputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$inputNameQueue[1]])) then local:generate-sector-output-coefs(remove($inputNameQueue, 1), $currTree, $coefs, $is_usa) else let $inputName := $inputNameQueue[1], $newInputNameQueue := remove($inputNameQueue, 1), $useInputs := $currTree//*[@type='input' and @name=$inputName], $useSectors := distinct-values($useInputs/ancestor::*[@type='sector']/@name), $totalInputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage) return element input { attribute vintage { $vintage }, text { sum($useInputs/demand-physical[@vintage=$vintage]) } }, $new_coefs := if(empty($useSectors)) then $coefs else $coefs | element sector { attribute name { $inputName }, for $output in $useSectors return element output { attribute name { $output }, for $inputSum in $totalInputSum let $outputSum := sum($useInputs[ancestor::*[@type='sector' and @name=$output]]/demand-physical[@vintage=$inputSum/@vintage]) return element coef { attribute vintage { $inputSum/@vintage }, text { $outputSum div $inputSum } } } } return local:generate-sector-output-coefs(distinct-values(($newInputNameQueue, $useSectors)), $currTree, $new_coefs, $is_usa) }; declare function local:apply-coefs($outputName as xs:string, $emissions as node()*, $coefs as node()*) as node()* { if(exists($coefs[@name=$outputName]) and abs(sum($emissions)) > 0.001) then for $output in $coefs[@name=$outputName]/output return local:apply-coefs($output/@name, for $year in distinct-values($emissions/@year) let $emissThisVintage := $emissions[@year=$year], $firstEmiss := $emissThisVintage[1], $emissSum := sum($emissThisVintage), $coefThisVintage := $output/coef[@vintage=$year] where $coefThisVintage > 0 return element { local-name($firstEmiss) } { $firstEmiss/@*, text{ $emissSum * $coefThisVintage } } , $coefs) else if( abs(sum($emissions)) > 0.001) then element sector { attribute name { $outputName }, attribute type { 'sector' }, (: $emissions :) (: TODO: not sure why this doesn't work and we need to create these explicitly :) for $e in $emissions return element emissions { $e/@*, text{ $e/text() } } } else (: These are the residuals from chasing simulenaties, I've left this here for debuging purposes :) element sector { attribute name { $outputName }, attribute type { 'sector' }(:, $emissions:) } }; declare function local:run-emiss-by-enduse($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { unordered { let $regionsG := if(not($regions[1] = 'Global')) then $regions else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name) return for $scenario in $scenarios, $region in $regionsG let $scenario_split := tokenize($scenario, ' '), $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region], $currEmissSectors := $currTree/*[@type='sector' and descendant::CO2], $coefs := local:generate-sector-output-coefs(distinct-values($currEmissSectors/@name), $currTree, (), false()) return for $sectorName in distinct-values($currEmissSectors/@name) return local:append-heirarchy($currTree, local:apply-coefs($sectorName, $currEmissSectors[@name=$sectorName]//CO2/emissions, $coefs))//text() } }; local:run-emiss-by-enduse((:scenarios:), (:regions:), (:collection:))]]>
         </xPath>
         <comments/>
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="trn_pass_road_LDV_4W" to="transportation"/>
               <rewrite from="trn_pass_road" to="transportation"/>
               <rewrite from="trn_freight_road" to="transportation"/>
               <rewrite from="trn_pass_road_LDV_2W" to="transportation"/>
               <rewrite from="trn_passenger" to="transportation"/>
               <rewrite from="trn_freight" to="transportation"/>
               <rewrite from="comm others" to="buildings"/>
               <rewrite from="comm heating" to="buildings"/>
               <rewrite from="comm cooling" to="buildings"/>
               <rewrite from="trn_pass_road_LDV" to="transportation"/>
               <rewrite from="trn_aviation_intl" to="transportation"/>
               <rewrite from="trn_pass_road_bus" to="transportation"/>
               <rewrite from="trn_pass" to="transportation"/>
               <rewrite from="N fertilizer" to="industry"/>
               <rewrite from="resid heating" to="buildings"/>
               <rewrite from="resid others" to="buildings"/>
               <rewrite from="unconventional oil production" to="industry"/>
               <rewrite from="resid cooling" to="buildings"/>
               <rewrite from="trn_shipping_intl" to="transportation"/>
               <rewrite from="cement" to="industry"/>
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
      </aQuery>
</queries>
