% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcl.R
\name{generate}
\alias{generate}
\title{Generate a report for a GCAM experiment}
\usage{
generate(scenctl, varctl, dbloc, outputdir = getwd(), model = "GCAM",
  template = NULL, fileformat = getOption("iamrpt.fileformat", "CSV"),
  scenmerge = getOption("iamrpt.scenmerge", TRUE),
  dataformat = getOption("iamrpt.dataformat", "tabs"),
  wideformat = getOption("iamrpt.wideformat", TRUE), regionctl = NULL)
}
\arguments{
\item{scenctl}{Name of the scenario control file.}

\item{varctl}{Name of the variable control file.}

\item{dbloc}{Directory holding the GCAM databases}

\item{outputdir}{Directory to write output to.  Default is the current
working directory.}

\item{model}{Name of the model (e.g., \code{'GCAM'}).  This is required for
the IIASA data format.  It is ignored for all other formats.}

\item{template}{Name of a csv file containing an IIASA template.  This is
only useful in the IIASA format.  See \code{\link{complete_iiasa_template}}
for instructions on how to use a template}

\item{fileformat}{Desired format for output files.}

\item{scenmerge}{Flag: if true, merge scenarios; otherwise, leave scenarios
as separate tables.}

\item{dataformat}{Indicates desired data format.  Supported formats are
\code{'tabs'}, \code{'merged'}, or \code{'IIASA'}}

\item{wideformat}{Flag: if true, convert data to wide format before output;
otherwise, leave in long format.}
}
\value{
NULL; the report will be written to output files as described in the
Output section.
}
\description{
Read the user control files (see details below) and run the report generation.
For each requested scenario the system will pull the queries needed to
compute the variables requested by the user.  The necessary calculations will
be run, and the result will be written in the requested format.
}
\section{Control files}{


The report generator requires two \emph{control files}.  The first lists the scenarios
to be run.  It should be a CSV file with the following columns:
\describe{
    \item{\strong{GCAM scenario}}{The name that GCAM used for the scenario.}
    \item{\strong{output scenario}}{The name that will be used for the scenario in the
final report.}
    \item{\strong{scenario db}}{The name of the GCAM database the scenario was recorded in.}
}
Each row in this table will cause a scenario to be generated in the report.

The second control file lists the variables that should be written into the
report.  It should have the following columns:
\describe{
    \item{\strong{GCAM variable}}{The canonical GCAM name for the variable.  The
\code{\link{listVariables}} function lists the variables known to the report
generation system.}
    \item{\strong{output variable}}{The name that will be used for the variable in the
output.}
    \item{\strong{aggregation keys}}{A comma-separated list of columns to group by
when aggregating the raw GCAM output.  This column can be left blank if no
aggregation is desired for this variable.}
    \item{\strong{aggregation function}}{The function to use in the
aggregation. Supported functions are \code{sum}, \code{mean}, \code{max},
\code{min}, and \code{median}.  If none is specified, \code{sum} will be
used.}
    \item{\strong{years}}{List of years to include in the output.  You can
list individual years, ranges in the form start:end, or stepped ranges in the
form start:end:step.  Ranges are inclusive, so 2000:2010:5 is the same as
2000, 2005, 2010.  If the year list is omitted, all years in the data will be
included.}
    \item{\strong{filters}}{Arbitrary filters to apply to the table, \emph{before}
aggregating.  These should be in the modified s-expression format described
below.  If no filters are to be applied this column can be left blank.}
    \item{\strong{output units}}{The desired output units for the variable.  The
report generation system will attempt to convert the units and will throw an
error if it fails.  If output in GCAM native units is desired, this column
can be left blank.}
}
}

\section{Output}{


The system has several options for formatting output.  These can be passed as
arugments to the system, or set as R options.  The names of the options and
their functions are:
\describe{
    \item{\code{iamrpt.fileformat}}{File format for output.  Options are
\code{"CSV"} and \code{"XLSX"}}
    \item{\code{iamrpt.scenmerge}}{If \code{TRUE}, for each variable merge the
results for all scenarios into a single table (distinguished by the value of
the scenario column).  Otherwise, create a separate table for each
combination of scenario and variable.}
    \item{\code{iamrpt.dataformat}}{Specify the data format; that is, how
the data is organized in the output files.  Three options are available:
      \describe{
        \item{\code{"tabs"}}{Each table generated goes into a separate tab (if
XLS output is selected) or file (if CSV output is selected).  The tab or file
will be named with the output of the table.}
        \item{\code{"merged"}}{The tables will be output sequentially into a
single tab or file.  Each table will be preceded by its name.  This is
similar to the format used by GCAM to output batch queries.}
        \item{\code{"IIASA"}}{The database format used by IIASA.  In this
format each table is spread into a row in a merged table, with a column to
identify the variable that each row comes from.}
   }
 }
   \item{\code{iamrpt.wideformat}}{If \code{TRUE}, reshape the tables into
wide format (years as columns) before output.  Otherwise, leave them in long
format.  If the IIASA data format is selected, then this option is ignored,
since the IIASA format requires wide data.}
}


Output filenames will be chosen automatically.  For an XLSX file the filename
will be 'iamrpt.xlsx'.  For CSV output with \code{tabs == FALSE} the result
will be 'iamrpt.csv'.  For CSV output with \code{tabs == TRUE} the output
files will be named with the scenario (if scenario tables are not merged) and
variable output names, for example 'Reference-GDP.csv'.  In any of these
cases, if a file already exists with the automatically chosen filename, the
first unused number will be appended, e.g., iamrpt001.xlsx, iamrpt002.xlsx,
etc.

The system produces a variety of diagnostic messages as it runs.  These can
be suppressed with \code{\link[base]{suppressMessages}}.  More serious
problems will be indicated with warnings.
}

\section{Filters}{


Filters are specified using three-element modified s-expressions.  For
example:

(notmatches; technology; CCS)

This would describe a filter that would select only those rows for which the
technology column does not match the regular expression "CCS".  Multiple
filters can be applied by putting them in a comma-separated list.

(!=; sector; beef), (!=; sector; sheepgoat)

The s-expressions are "modified" by separating the elements with semicolons
instead of whitespace.  This allows us to have operands with internal
whitespace.  However, leading and trailing whitespace will always be
trimmed.

The filter functions currently recognized by the system are
\describe{
  \item{\code{==}}{String equality}
  \item{\code{!=}}{String inequality}
  \item{\code{<}}{Numeric less-than}
  \item{\code{>}}{Numeric greather-than}
  \item{\code{<=}}{Numeric less-than-or-equals}
  \item{\code{>=}}{Numeric greater-than-or-equals}
  \item{\code{matches}}{Regular expression match.  Note that because of the
way we parse these strings you can't have a \code{','}, \code{';'},
\code{'('}, or \code{')'} in your
regular expressions for this function or any of the ones below.}
  \item{\code{matchesi}}{Case-insensitive regular expression match.}
  \item{\code{notmatches}}{Regular expression inverted match.  That is,
select the rows that do \emph{not} match the given regular expression.}
  \item{\code{notmatchesi}}{Case-insensitive regular expression inverted
match.}
}
}

